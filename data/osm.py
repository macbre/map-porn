#!/usr/bin/env python3
import bz2
from genericpath import exists
import logging
from posixpath import dirname
from tempfile import gettempdir
from os import path
from typing import Generator
from xml import sax
from xml.sax import handler, xmlreader

import requests

# https://wiki.openstreetmap.org/wiki/Category:Tag_descriptions

# https://wiki.openstreetmap.org/wiki/Buses#Stops_and_bus_stations
# <tag k="highway" v="bus_stop"/>
TAG_KEY = 'highway'
TAG_VALUE = 'bus_stop'

def cache_osm_file():
    # https://download.geofabrik.de/europe/faroe-islands.html
    URL = 'https://download.geofabrik.de/europe/faroe-islands-latest.osm.bz2'
    LOCAL_FILE = path.join(path.abspath(path.dirname(__file__)), 'osm-faroe-islands.xml.bz2')

    logger = logging.getLogger(name="fetch")

    if path.exists(LOCAL_FILE):
        logger.info(f'The cached OSM XML file exists at {LOCAL_FILE}')
        return LOCAL_FILE

    logger.info(f'The cached OSM XML not found at {LOCAL_FILE} -> fetching {URL} ...')

    resp = requests.get(URL, headers={'user-agent': 'osm.py'})
    resp.raise_for_status()

    logger.info(f'HTTP {resp.status_code}')

    with open(LOCAL_FILE, "wb") as f:
        f.write(resp.content)

    return LOCAL_FILE


class OSMHandler(handler.ContentHandler):
    def __init__(self) -> None:
        self._reset()
        self.logger = logging.getLogger(name=self.__class__.__name__)
        self.nodes_counter = 0;

    def _reset(self, current_element: str = None):
        self.current_element = current_element
        self.attrs = {}
        self.tags = []

    def startElement(self, name: str, attrs: xmlreader.AttributesImpl):
        if name == 'osm':
            # <osm version="0.6" generator="osmium/1.14.0">
            self.logger.info(f'OSM XML starts here, generated by {attrs.get("generator", "n/a")}')

        # https://wiki.openstreetmap.org/wiki/Node#Structure
        elif name == 'node':
            # <node id="29023814" version="5" timestamp="2022-12-08T01:56:54Z" lat="61.5557547" lon="-6.8145764">
            self._reset(current_element='node')
            self.nodes_counter = self.nodes_counter + 1

            self.attrs = {
                'id': attrs['id'],
                'lat': attrs['lat'],
                'lon': attrs['lon'],
            }
        elif name == 'tag' and self.current_element == 'node':
            # append tags as a tuple
            # <tag k="place" v="town"/>
            # e.g. ('highway', 'traffic_signals'), ('traffic_signals', 'traffic_lights')
            self.tags.append((attrs['k'], attrs['v']))

    def endElement(self, name: str):
        if name == 'node':
            if self.tags:
                self.logger.debug(f'{name} ({self.attrs}): {self.tags}')

            self._reset()

    def endDocument(self):
        self.logger.info(f'Parsed OSM XML file with {self.nodes_counter} node(s)')


def iterate_xml(xml_file) -> Generator:
    """
    Given a path to the local bz2-compressed OSM XML file parse it.

    The function will then yield all nodes sequentially along with their tags
    """
    logger = logging.getLogger(name="xml")
    logger.info(f'Parsing OSM XML from {xml_file}')

    with bz2.open(xml_file) as f:
        # https://docs.python.org/3/library/xml.sax.reader.html
        reader = sax.make_parser(('xml.sax.xmlreader.IncrementalParser'))
        reader.setContentHandler(OSMHandler())
        reader.parse(f)

    return


def main():
    logger = logging.getLogger(name="osm")
    logger.info(f'Looking for "{TAG_KEY}" = "{TAG_VALUE}" ...')

    local_file = cache_osm_file()

    for nodes in iterate_xml(local_file):
        print(nodes)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()
